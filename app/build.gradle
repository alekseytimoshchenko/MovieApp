apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

def libs = rootProject.ext.libraries
def test = rootProject.ext.testingLibraries
def config = rootProject.ext.configuration

android {
    compileSdkVersion config.compileVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode config.versionCode
        versionName config.versionName
        signingConfig signingConfigs.debug
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //android
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:${libs.supportVersion}"
    implementation "com.android.support:design:${libs.supportVersion}"
    implementation "com.android.support:support-v4:${libs.supportVersion}"
    implementation "com.android.support:recyclerview-v7:${libs.supportVersion}"
    implementation "com.android.support.constraint:constraint-layout:${libs.constraintLayout}"

    //Test
    testImplementation "junit:junit:${test.junit}"
    androidTestImplementation "com.android.support.test:runner:${test.androidJUnitRunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${test.espressoCore}"

    //Dependency Injection
    implementation "com.google.dagger:dagger:${libs.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libs.daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${libs.daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${libs.daggerVersion}"

    //Kotlin reflection
    implementation "org.jetbrains.kotlinx:kotlinx.reflect.lite:${libs.kotlinReflection}"

    //Anko
    implementation "org.jetbrains.anko:anko-common:${libs.ankoVersion}"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit2Version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libs.retrofit2Rxjava2Version}"
    implementation "com.squareup.retrofit2:converter-gson:${libs.retrofit2converterJacksonVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libs.loggingInterceptorVersion}"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:${libs.rx2javaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroidVersion}"
    implementation "io.reactivex.rxjava2:rxkotlin:${libs.rxKotlinVersion}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${libs.glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${libs.glideVersion}"

    // Paging
    implementation "android.arch.paging:runtime:${libs.paging}"

    //Lifecycle
    implementation "android.arch.lifecycle:extensions:${libs.lifecycle}"
    annotationProcessor "android.arch.lifecycle:compiler:${libs.lifecycle}"

    //Log
    implementation "com.jakewharton.timber:timber:${libs.timber}"
    implementation "com.facebook.stetho:stetho:${libs.stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${libs.stetho}"

    //Memory profiling
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libs.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libs.leakcanary}"
}
